//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Meta/Console/Scripts/Inputs/ConsoleInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ConsoleInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ConsoleInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ConsoleInputs"",
    ""maps"": [
        {
            ""name"": ""Enabler"",
            ""id"": ""eddc9ba3-fc8b-4d29-879c-bf3f4f2b7417"",
            ""actions"": [
                {
                    ""name"": ""EnableConsole"",
                    ""type"": ""Button"",
                    ""id"": ""971f86f1-b12d-4d88-b901-ec4ba5ba453a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Button With One Modifier"",
                    ""id"": ""03793741-8fef-43b5-969f-66c1ed39d54e"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableConsole"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""2f25433f-1786-41fb-93fd-cdc3a8466e38"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""55b0ba35-a568-4436-8893-52b92fdef253"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""History"",
            ""id"": ""f96ec7a6-b12a-49b4-9477-daabdc863de7"",
            ""actions"": [
                {
                    ""name"": ""HistoryForward"",
                    ""type"": ""Button"",
                    ""id"": ""038d4943-8d85-4291-8651-215716ab6ea4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HistoryBackward"",
                    ""type"": ""Button"",
                    ""id"": ""53f4df4c-78e5-4db6-897f-d86233ea092e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cef5521a-1896-4b87-b337-7fd70ebfde1e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HistoryForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""862f900e-0564-45fb-a62c-39ffca475cdc"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Hold(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HistoryForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0381c79e-8edd-45fe-9d54-fbe4aa528e7c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HistoryBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""493088fd-a80f-43d9-b49b-09e67da82b09"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""MultiTap(tapDelay=0.75)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HistoryBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OtherGUI"",
            ""id"": ""141ebd46-2e2c-4e81-b725-7b1ede2aa0cc"",
            ""actions"": [
                {
                    ""name"": ""ResizeFromCenter"",
                    ""type"": ""Button"",
                    ""id"": ""6a775bf3-29e7-4397-9d7f-1fec305ee401"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6d79da0-fb77-408c-81da-ff552c4a43eb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResizeFromCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6206b439-7125-4772-a02c-04360261be63"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResizeFromCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ObjectPick"",
            ""id"": ""725910a4-7ec1-4b54-be08-e79a0e5cb719"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""59ad1200-ac0e-40f0-8ef9-285c06d24d29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""b85b260d-b2df-43ce-8526-7b304d2517cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9523c42-9bdb-407e-857b-b642ee8a7160"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9088c5fe-f000-4018-abef-c683d3173571"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme1"",
            ""bindingGroup"": ""New control scheme1"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Enabler
        m_Enabler = asset.FindActionMap("Enabler", throwIfNotFound: true);
        m_Enabler_EnableConsole = m_Enabler.FindAction("EnableConsole", throwIfNotFound: true);
        // History
        m_History = asset.FindActionMap("History", throwIfNotFound: true);
        m_History_HistoryForward = m_History.FindAction("HistoryForward", throwIfNotFound: true);
        m_History_HistoryBackward = m_History.FindAction("HistoryBackward", throwIfNotFound: true);
        // OtherGUI
        m_OtherGUI = asset.FindActionMap("OtherGUI", throwIfNotFound: true);
        m_OtherGUI_ResizeFromCenter = m_OtherGUI.FindAction("ResizeFromCenter", throwIfNotFound: true);
        // ObjectPick
        m_ObjectPick = asset.FindActionMap("ObjectPick", throwIfNotFound: true);
        m_ObjectPick_Mouse = m_ObjectPick.FindAction("Mouse", throwIfNotFound: true);
        m_ObjectPick_Click = m_ObjectPick.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Enabler
    private readonly InputActionMap m_Enabler;
    private List<IEnablerActions> m_EnablerActionsCallbackInterfaces = new List<IEnablerActions>();
    private readonly InputAction m_Enabler_EnableConsole;
    public struct EnablerActions
    {
        private @ConsoleInputs m_Wrapper;
        public EnablerActions(@ConsoleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableConsole => m_Wrapper.m_Enabler_EnableConsole;
        public InputActionMap Get() { return m_Wrapper.m_Enabler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EnablerActions set) { return set.Get(); }
        public void AddCallbacks(IEnablerActions instance)
        {
            if (instance == null || m_Wrapper.m_EnablerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EnablerActionsCallbackInterfaces.Add(instance);
            @EnableConsole.started += instance.OnEnableConsole;
            @EnableConsole.performed += instance.OnEnableConsole;
            @EnableConsole.canceled += instance.OnEnableConsole;
        }

        private void UnregisterCallbacks(IEnablerActions instance)
        {
            @EnableConsole.started -= instance.OnEnableConsole;
            @EnableConsole.performed -= instance.OnEnableConsole;
            @EnableConsole.canceled -= instance.OnEnableConsole;
        }

        public void RemoveCallbacks(IEnablerActions instance)
        {
            if (m_Wrapper.m_EnablerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEnablerActions instance)
        {
            foreach (var item in m_Wrapper.m_EnablerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EnablerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EnablerActions @Enabler => new EnablerActions(this);

    // History
    private readonly InputActionMap m_History;
    private List<IHistoryActions> m_HistoryActionsCallbackInterfaces = new List<IHistoryActions>();
    private readonly InputAction m_History_HistoryForward;
    private readonly InputAction m_History_HistoryBackward;
    public struct HistoryActions
    {
        private @ConsoleInputs m_Wrapper;
        public HistoryActions(@ConsoleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @HistoryForward => m_Wrapper.m_History_HistoryForward;
        public InputAction @HistoryBackward => m_Wrapper.m_History_HistoryBackward;
        public InputActionMap Get() { return m_Wrapper.m_History; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HistoryActions set) { return set.Get(); }
        public void AddCallbacks(IHistoryActions instance)
        {
            if (instance == null || m_Wrapper.m_HistoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HistoryActionsCallbackInterfaces.Add(instance);
            @HistoryForward.started += instance.OnHistoryForward;
            @HistoryForward.performed += instance.OnHistoryForward;
            @HistoryForward.canceled += instance.OnHistoryForward;
            @HistoryBackward.started += instance.OnHistoryBackward;
            @HistoryBackward.performed += instance.OnHistoryBackward;
            @HistoryBackward.canceled += instance.OnHistoryBackward;
        }

        private void UnregisterCallbacks(IHistoryActions instance)
        {
            @HistoryForward.started -= instance.OnHistoryForward;
            @HistoryForward.performed -= instance.OnHistoryForward;
            @HistoryForward.canceled -= instance.OnHistoryForward;
            @HistoryBackward.started -= instance.OnHistoryBackward;
            @HistoryBackward.performed -= instance.OnHistoryBackward;
            @HistoryBackward.canceled -= instance.OnHistoryBackward;
        }

        public void RemoveCallbacks(IHistoryActions instance)
        {
            if (m_Wrapper.m_HistoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHistoryActions instance)
        {
            foreach (var item in m_Wrapper.m_HistoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HistoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HistoryActions @History => new HistoryActions(this);

    // OtherGUI
    private readonly InputActionMap m_OtherGUI;
    private List<IOtherGUIActions> m_OtherGUIActionsCallbackInterfaces = new List<IOtherGUIActions>();
    private readonly InputAction m_OtherGUI_ResizeFromCenter;
    public struct OtherGUIActions
    {
        private @ConsoleInputs m_Wrapper;
        public OtherGUIActions(@ConsoleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ResizeFromCenter => m_Wrapper.m_OtherGUI_ResizeFromCenter;
        public InputActionMap Get() { return m_Wrapper.m_OtherGUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherGUIActions set) { return set.Get(); }
        public void AddCallbacks(IOtherGUIActions instance)
        {
            if (instance == null || m_Wrapper.m_OtherGUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OtherGUIActionsCallbackInterfaces.Add(instance);
            @ResizeFromCenter.started += instance.OnResizeFromCenter;
            @ResizeFromCenter.performed += instance.OnResizeFromCenter;
            @ResizeFromCenter.canceled += instance.OnResizeFromCenter;
        }

        private void UnregisterCallbacks(IOtherGUIActions instance)
        {
            @ResizeFromCenter.started -= instance.OnResizeFromCenter;
            @ResizeFromCenter.performed -= instance.OnResizeFromCenter;
            @ResizeFromCenter.canceled -= instance.OnResizeFromCenter;
        }

        public void RemoveCallbacks(IOtherGUIActions instance)
        {
            if (m_Wrapper.m_OtherGUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOtherGUIActions instance)
        {
            foreach (var item in m_Wrapper.m_OtherGUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OtherGUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OtherGUIActions @OtherGUI => new OtherGUIActions(this);

    // ObjectPick
    private readonly InputActionMap m_ObjectPick;
    private List<IObjectPickActions> m_ObjectPickActionsCallbackInterfaces = new List<IObjectPickActions>();
    private readonly InputAction m_ObjectPick_Mouse;
    private readonly InputAction m_ObjectPick_Click;
    public struct ObjectPickActions
    {
        private @ConsoleInputs m_Wrapper;
        public ObjectPickActions(@ConsoleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_ObjectPick_Mouse;
        public InputAction @Click => m_Wrapper.m_ObjectPick_Click;
        public InputActionMap Get() { return m_Wrapper.m_ObjectPick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ObjectPickActions set) { return set.Get(); }
        public void AddCallbacks(IObjectPickActions instance)
        {
            if (instance == null || m_Wrapper.m_ObjectPickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ObjectPickActionsCallbackInterfaces.Add(instance);
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IObjectPickActions instance)
        {
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IObjectPickActions instance)
        {
            if (m_Wrapper.m_ObjectPickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IObjectPickActions instance)
        {
            foreach (var item in m_Wrapper.m_ObjectPickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ObjectPickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ObjectPickActions @ObjectPick => new ObjectPickActions(this);
    private int m_Newcontrolscheme1SchemeIndex = -1;
    public InputControlScheme Newcontrolscheme1Scheme
    {
        get
        {
            if (m_Newcontrolscheme1SchemeIndex == -1) m_Newcontrolscheme1SchemeIndex = asset.FindControlSchemeIndex("New control scheme1");
            return asset.controlSchemes[m_Newcontrolscheme1SchemeIndex];
        }
    }
    public interface IEnablerActions
    {
        void OnEnableConsole(InputAction.CallbackContext context);
    }
    public interface IHistoryActions
    {
        void OnHistoryForward(InputAction.CallbackContext context);
        void OnHistoryBackward(InputAction.CallbackContext context);
    }
    public interface IOtherGUIActions
    {
        void OnResizeFromCenter(InputAction.CallbackContext context);
    }
    public interface IObjectPickActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
